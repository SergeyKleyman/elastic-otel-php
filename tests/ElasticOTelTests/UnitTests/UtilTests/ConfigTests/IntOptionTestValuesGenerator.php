<?php

/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright
 * ownership. Elasticsearch B.V. licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

declare(strict_types=1);

namespace ElasticOTelTests\UnitTests\UtilTests\ConfigTests;

use ElasticOTelTests\Util\Config\IntOptionParser;
use ElasticOTelTests\Util\Config\NumericOptionParser;
use ElasticOTelTests\Util\RandomUtil;
use Override;

/**
 * @extends NumericOptionTestValuesGeneratorBase<int>
 */
class IntOptionTestValuesGenerator extends NumericOptionTestValuesGeneratorBase
{
    public function __construct(
        protected IntOptionParser $optionParser
    ) {
    }

    /**
     * @return IntOptionParser
     */
    protected function optionParser(): NumericOptionParser
    {
        return $this->optionParser;
    }

    /**
     * @return int
     */
    final protected static function maxValueSupportedByType(): int
    {
        return PHP_INT_MAX;
    }

    /**
     * @return int
     */
    final protected static function minValueSupportedByType(): int
    {
        return PHP_INT_MIN;
    }

    /**
     * @return iterable<OptionTestValidValue<int>>
     */
    protected function manualInterestingValues(): iterable
    {
        return self::intManualInterestingValues();
    }

    /**
     * @return iterable<int>
     */
    protected function autoGeneratedInterestingValuesToDiff(): iterable
    {
        return self::intInterestingValuesToDiff();
    }

    /**
     * @return iterable<int>
     */
    protected function autoGeneratedInterestingValueDiffs(): iterable
    {
        return self::intInterestingDiffs();
    }

    /**
     * @param int $min
     * @param int $max
     */
    protected static function randomValue($min, $max): int
    {
        return RandomUtil::generateIntInRange($min, $max);
    }

    /**
     * @param int $value
     *
     * @return OptionTestValidValue<int>
     */
    protected static function createOptionTestValidValue($value): OptionTestValidValue
    {
        return new OptionTestValidValue(strval($value), $value);
    }

    /** @inheritDoc */
    #[Override]
    public function invalidRawValues(): iterable
    {
        yield from ['0.0', '1.0', '-1.0', '1.5', '-1.5', '20.2', '-30.3'];
        yield from parent::invalidRawValues();
    }
}
